#include <iostream>
#include <list>

using namespace std;
struct Node{

Node *left;
Node *right;
int data;
Node(int d)
{
  left = NULL;
  right = NULL;
  data =d;
} 
};
class Binary_Tree{
public:
Node *root;


Binary_Tree()
{
   root = NULL;
} 

  void insert(int element);
  int height(Node *n){
   if(n==NULL)return -1;
   return max(height(n->left),height(n->right))+1;
}

bool chek(Node *n){
     if(n==NULL)return 1;
    int nn=height(n->left)-height(n->right);
    if(nn>1)return 0;else{
        chek(n->left);chek(n->right);
    }
   
}bool cc(){chek(root);}

};
void Binary_Tree::insert(int ele)
{
 Node *node = new Node(ele); 
  if (root == NULL)
  {
    root = node;
    return;
  }
  Node* temp = root;
  while(temp != NULL)
  {
    if (ele > temp->data)
    {
      if(temp->right != NULL)
         temp = temp->right;
      else
      { 
        temp->right = node;
        return;
      }
    } 
   else
   {
      if(temp->left != NULL)
        temp = temp->left;
      else
       {
         temp->left = node;
         return;
       }
   }
  }  
}

bool ch(Node* n,Node* l=NULL,Node* r=NULL){
    if(n==NULL)return 1;
   
    if(l!=NULL&&n->data<=l->data)
    return 0;
    
     if(r!=NULL&&n->data>=r->data)
    return 0;
    return ch(n->left, l, n) and 
           ch(n->right, n, r); 
}


int main()
{

Binary_Tree bt;
 bt.insert(3);

bt.insert(2);
bt.insert(4);
bt.insert(1);
bt.insert(5);

  

cout<<ch(bt.root); 

return 0;
}
