#include <iostream>
#include <list>

using namespace std;
struct Node{

Node *left;
Node *right;Node* par;
int data;
Node(int d)
{
  left = NULL;
  right = NULL;
  par =NULL;
  data =d;
} 
};
class Binary_Tree{
public:
Node *root;


Binary_Tree()
{
   root = NULL;
} 

  void insert(int element);
  

};
void Binary_Tree::insert(int ele)
{
 Node *node = new Node(ele); 
  if (root == NULL)
  {
    root = node;root->par=NULL;
    return;
  }
  Node* temp = root;
  while(temp != NULL)
  {
    if (ele > temp->data)
    {
      if(temp->right != NULL){
         temp = temp->right;
          
      }
      else
      { 
        temp->right = node;node->par=temp;
        return;
      }
    } 
   else
   {
      if(temp->left != NULL)
        {temp = temp->left;}
      else
       {
         temp->left = node;node->par=temp;
         return;
       }
   }
  }  
}
void leftm(Node* n){
    if(n==NULL)return;
    while(n->left!=NULL){
        n=n->left;
    }cout<<n->data;
}
 void ino(Node* r){
    if(r==NULL)return;
    if(r->right!=NULL) leftm(r->right);
    else{
        Node *q=r;
        Node *x=q->par;
        while(x!=NULL&&x->left!=q){
            q=x;x=x->par;
        }cout<<x->data;
    }
   
  
    
} 


int main()
{

Binary_Tree bt;
 bt.insert(3);

bt.insert(2);
bt.insert(4);
bt.insert(1);
bt.insert(5);

  

ino(bt.root->left);

return 0;
}
